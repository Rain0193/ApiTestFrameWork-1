<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
	        http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <bean id="carrental_DataSource"
          class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="carrental_datasource"/>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="url">${unified_user.url}</prop>
                <prop key="user">${unified_user.username}</prop>
                <prop key="password">${unified_user.password}</prop>
            </props>
        </property>
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="100"/>
        <property name="borrowConnectionTimeout" value="30"/>
        <property name="testQuery" value="select 1"/>
        <property name="maintenanceInterval" value="60"/>
    </bean>

    <bean id="carrental_jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name = "dataSource" ref="carrental_DataSource"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="carrental_sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="carrental_DataSource"/>
    </bean>

    <!--
        3.查找类路径下的映射器并自动将它们创建成MapperFactoryBean
    -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.test.framework.dao.mysql.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="carrental_sqlSessionFactory"/>
        <property name="properties">
            <value>
                mappers=com.test.framework.common.tkmapper.CustomMapper
            </value>
        </property>
    </bean>

    
    <!--
        4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
    -->
    <!-- 事务配置 -->
    <bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
          init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <props>
                <prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory
                </prop>
            </props>
        </constructor-arg>
    </bean>
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close" depends-on="userTransactionService">
        <property name="forceShutdown" value="false"/>
    </bean>
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp"
          depends-on="userTransactionService">
        <property name="transactionTimeout" value="300"/>
    </bean>
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager"
          depends-on="userTransactionService">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
    </bean>

    <context:component-scan base-package="com.test.framework.service" />
    <context:component-scan base-package="com.test.framework.dao.redis" />
    <context:component-scan base-package="com.test.framework.dao.mongo" />
    <import resource="classpath:spring-redis.xml" />
    <import resource="classpath:spring-mongodb.xml" />
</beans>
